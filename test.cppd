#include <iostream>
#include <vector>


size_t	binarySearchByStep(std::vector<int> &main_chain, int number, size_t end, size_t step) {
	size_t	left = 0;
	size_t	right = end;

	if (number < main_chain[0])
		return (0);
	std::cout << "---BinarySearch---" << std::endl;
	std::cout << "search number: " << number << " step: "  << step << std::endl;
	while (right - left > step) {
		std::cout << "left: " << left << " " << " right: " << right << std::endl;
		size_t mid = (right + left) / 2;
		if (main_chain[mid] <= number)
			left = mid;
		else
			right = mid;
		std::cout << "cmp: " << main_chain[mid] << " " << "number: " << number<< std::endl;
	}
	return (right);
}


int main()
{

	std::vector<int>	vec(8);
	int					number;

	for (size_t i = 0; i < vec.size(); i++)
		vec[i] = i * i;

	while(1) {
		for (size_t i = 0; i < vec.size(); i++)
			std::cout << vec[i] << " ";
		std::cout << std::endl;

		std::cin >> number;
		size_t index = binarySearchByStep(vec, number, 3, 1);
		std::cout << "index: " << index << std::endl;
		vec.insert(vec.begin() + index, number);
	}

}
